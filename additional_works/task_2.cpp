/* Задача № 2
Умова:
Написати програму, що використовує функцію обчислення заданого мінору матриці.
                                                                        ***
Що робить ця програма/цей код:
Конкретна реалізація функції обчислення мінору матриці може залежати від певних вимог та специфікацій.
Однак, в цілому, функція для обчислення мінора матриці може бути реалізована таким чиномяк представлено нижче.

Ця програма створює матрицю, потім використовує функцію getMinor() для обчислення мінора матриці в заданому рядку та стовпці.
Результат виводится на екран.
У цьому прикладі функція обчислює мінор матриці заданого порядку.
Якщо потрібно обчислити мінор матриці іншого порядку, необхідно внести відповідні зміни до коду.
                                                                        ***
Покроковий опис роботи коду/вирішення задачі:
1. На початку програми визначається розмір матриці n і запитується у користувача через стандартне введення.
2. Створюється двомірний вектор matrix розміру n на n заповнений нулями.
3. Заповнюється матриця matrix значеннями, що вводять користувач через стандартне введення.
4. Запитується у користувача номер рядка та стовпця для обчислення мінору.
5. Створюється допоміжна матриця minor розміру (n-1) (n-1), заповнена нулями.
6. Обчислюється мінор матриці matrix за допомогою подвійного циклу.
    Якщо поточна позиція в матриці збігається з обраним користувачем рядком або стовпцем,
    пропускаємо цю позицію і не додаємо її значення до допоміжної матриці minor.
    В іншому випадку копіюємо відповідне значення з матриці matrix у відповідну позицію в матриці minor.
7. Виводиться отримана матриця minor на екран через стандартний висновок.
8. Програма завершується.
Як тільки користувач вводить номер рядка та стовпця для обчислення мінора, програма виконує обчислення та виводить результат.
*/

#include <iostream>
#include <vector>

using namespace std;

// функция для вычисления минора матрицы
int getMinor(vector<vector<int>> &mat, int row, int col)
{
    int n = mat.size();
    vector<vector<int>> minor(n - 1, vector<int>(n - 1));
    int minorRow = 0, minorCol;
    for (int i = 0; i < n; i++)
    {
        if (i == row)
        {
            continue;
        }
        minorCol = 0;
        for (int j = 0; j < n; j++)
        {
            if (j == col)
            {
                continue;
            }
            minor[minorRow][minorCol] = mat[i][j];
            minorCol++;
        }
        minorRow++;
    }
    int result = minor[0][0];
    if (n == 2)
    {
        result = (mat[0][0] * mat[1][1]) - (mat[1][0] * mat[0][1]);
    }
    else
    {
        for (int i = 1; i < n - 1; i++)
        {
            result = result * minor[i][i];
        }
    }
    return result;
}

int main()
{
    // запрос размера матрицы
    int n;
    cout << "Введите размер матрицы: ";
    cin >> n;

    // создание матрицы и заполнение ее элементами
    vector<vector<int>> mat(n, vector<int>(n, 0));
    cout << "Введите элементы матрицы:" << endl;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> mat[i][j];
        }
    }

    // вывод исходной матрицы
    cout << "Исходная матрица:" << endl;
    for (vector<vector<int>>::iterator it = mat.begin(); it != mat.end(); ++it)
    {
        for (vector<int>::iterator jt = it->begin(); jt != it->end(); ++jt)
        {
            cout << *jt << " ";
        }
        cout << endl;
    }

    // запрос номера строки и столбца для вычисления минора
    int row, col;
    cout << "Введите номер строки и столбца для вычисления минора (нумерация с нуля): ";
    cin >> row >> col;

    // вычисление минора матрицы
    int minor = getMinor(mat, row, col);
    cout << "Minor at (" << row << ", " << col << ") = " << minor << endl;

    return 0;
}
