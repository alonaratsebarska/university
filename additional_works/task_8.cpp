/* Задача № 8
Умова:
Написати програму, яка змінює порядок елементів у двовимірному масиві : у парних рядках – за зростанням елементів у рядку.
                                                                        ***
Що робить ця програма/цей код:
Ця програма створює двовимірний вектор matrix, який містить елементи цілого типу,
потім змінює порядок елементів у кожному парному рядку матриці, сортуючи їх за зростанням, і виводить вихідну і змінену матриці в консоль.
Функція reverseMatrix використовує вбудовану функцію sort для сортування елементів у кожному парному рядку матриці.
Функція printMatrix виводить елементи матриці на консоль.
Функції reverseMatrix і printMatrix приймають як аргументи посилання на двовимірний вектор matrix,
щоб зміни, внесені в матрицю всередині функції reverseMatrix, було видно в основній програмі.
                                                                        ***
Покроковий опис роботи коду/вирішення задачі:
1. Оголошуються необхідні заголовні файли та простір імен.
2. Визначається функція reverseMatrix(), яка приймає вектор векторів цілих чисел matrix за посиланням.
    Усередині функції обчислюється кількість рядків у матриці та проходить циклом по всіх рядках.
    Якщо номер поточного рядка є парним, то за допомогою функції sort() сортуються елементи рядка в порядку зростання.
3. Визначається функція printMatrix(), яка приймає вектор векторів цілих чисел matrix за посиланням.
    Усередині функції відбувається два вкладені цикли: за рядками та за елементами у рядку.
    Кожен елемент виводиться на екран, після чого перехід на наступний рядок.
4. У функції main() створюється вихідна матриця, заповнюються її елементи, виводиться на екран,
    змінюється за допомогою функції reverseMatrix(), а потім знову виводиться на екран.
5. Наприкінці програми повертається нуль, що означає успішне завершення програми.
*/

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Функция для изменения порядка элементов в матрице
void reverseMatrix(vector<vector<int>> &matrix)
{
    int n = matrix.size();
    for (int i = 0; i < n; i++)
    {
        // Изменяем порядок элементов в четных строках
        if (i % 2 == 0)
        {
            sort(matrix[i].begin(), matrix[i].end());
        }
    }
}

// Функция для вывода матрицы
void printMatrix(vector<vector<int>> &matrix)
{
    for (vector<vector<int>>::iterator it = matrix.begin(); it != matrix.end(); ++it)
    {
        for (vector<int>::iterator jt = it->begin(); jt != it->end(); ++jt)
        {
            cout << *jt << " ";
        }
        cout << endl;
    }
}

int main()
{
    // Создание исходной матрицы
    vector<vector<int>> matrix;
    matrix.push_back(vector<int>{5, 7, 3, 1, 2, 9});
    matrix.push_back(vector<int>{8, 7, 6, 5, 4, 3});
    matrix.push_back(vector<int>{2, 1, 5, 4, 3, 2});
    matrix.push_back(vector<int>{2, 1, 1, 1, 1, 1});
    matrix.push_back(vector<int>{1, 1, 1, 1, 1, 1});
    matrix.push_back(vector<int>{11, 1, 1, 11, 1, 1});

    // Вывод исходной матрицы
    cout << "Исходная матрица:" << endl;
    printMatrix(matrix);

    // Изменение порядка элементов в матрице
    reverseMatrix(matrix);

    // Вывод измененной матрицы
    cout << "Матрица с измененным порядком элементов:" << endl;
    printMatrix(matrix);

    return 0;
}
